{"version":3,"sources":["utils/index.js","components/Card.js","App.js","index.js"],"names":["CARDS","split","map","n","Number","flat","isDescending","numbers","filter","number","index","length","moveCard","piles","movedCard","destinationCard","destinationPileIndex","isEmpty","pileIndex","findIndex","pile","find","c","targetPile","targetPileIndex","cardPileIndex","sourcePile","indexInPile","card","numToMove","allowCheat","isCheat","value","movingCards","slice","validOrder","m","getCardIsActive","activeCard","isActive","activePile","getCanCardMove","useWindowEvent","event","callback","useEffect","window","addEventListener","removeEventListener","Card","onMouseDown","onMouseUp","cursorState","shouldFollowCursor","isPressed","canMove","height","innerHeight","width","innerWidth","style","y","mouseY","Math","abs","x","mouseX","z","spring","key","onPointerDown","bind","onPointerUp","data-index","deckIndex","className","transform","zIndex","initialState","startX","startY","App","useState","setActiveCard","setCursorState","chunk","shuffle","i","setPiles","deck","e","pageX","pageY","topDeltaY","topDeltaX","pressedIndex","onCardRelease","clickedCard","elementUnder","document","elementFromPoint","clientX","clientY","parentElement","eventCardIndex","dataset","diffX","diffY","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.667048f8.chunk.js","sourcesContent":["import shuffle from 'lodash/shuffle'\nimport chunk from 'lodash/chunk'\nimport { useEffect } from 'react'\n\nconst CARDS = '987654321'\n  .split('')\n  .map(n => Number(n))\n  .map(n => [n, n, n, n])\n  .flat()\n\nexport const shuffleDeck = () =>\n  chunk(\n    shuffle(CARDS).map((n, i) => ({\n      value: n,\n      index: i,\n    })),\n    6,\n  )\n\nexport const isDescending = numbers => {\n  return (\n    numbers.filter((number, index) => {\n      return numbers[index + 1] ? number === numbers[index + 1] + 1 : true\n    }).length === numbers.length\n  )\n}\n\nexport const moveCard = (piles, movedCard, destinationCard) => {\n  const destinationPileIndex = destinationCard.isEmpty\n    ? destinationCard.pileIndex\n    : piles.findIndex(pile => pile.find(c => c.index === destinationCard.index))\n\n  return piles.map((targetPile, targetPileIndex) => {\n    const cardPileIndex = piles.findIndex(pile =>\n      pile.find(c => c.index === movedCard.index),\n    )\n    const sourcePile = piles[cardPileIndex]\n    const indexInPile = sourcePile.findIndex(\n      card => card.index === movedCard.index,\n    )\n    const numToMove = sourcePile.length - indexInPile\n\n    const allowCheat =\n      numToMove === 1 && !movedCard.isCheat && !destinationCard.isCheat\n\n    const isCheat =\n      movedCard.value !== destinationCard.value - 1 && !destinationCard.isEmpty\n\n    const movingCards = sourcePile.slice(indexInPile, indexInPile + numToMove)\n    const validOrder =\n      destinationCard.isEmpty ||\n      (!destinationCard.isCheat &&\n        isDescending([destinationCard.value, ...movingCards.map(m => m.value)]))\n\n    if (cardPileIndex === destinationPileIndex) {\n      return targetPile\n    }\n\n    if (validOrder || allowCheat) {\n      // remove the active movedCard from its pile\n      if (targetPileIndex === cardPileIndex) {\n        return targetPile.slice(0, targetPile.length - numToMove)\n      }\n\n      // add the active movedCard to the target pile\n      if (targetPileIndex === destinationPileIndex) {\n        return [...targetPile, ...movingCards.map(c => ({ ...c, isCheat }))]\n      }\n    }\n\n    return targetPile\n  })\n}\n\nexport function getCardIsActive(activeCard, card, piles) {\n  let isActive = false\n\n  if (activeCard) {\n    const { index } = activeCard\n    isActive = index === card.index\n    const activePile = piles.find(pile => pile.find(c => c.index === index))\n    const activeIndexInPile = activePile.findIndex(c => c.index === index)\n    const indexInPile = activePile.findIndex(c => c.index === card.index)\n    isActive = activeIndexInPile <= indexInPile\n  }\n\n  return isActive\n}\n\nexport const getCanCardMove = (card, piles) => {\n  const pileIndex = piles.findIndex(pile =>\n    pile.find(c => c.index === card.index),\n  )\n  const pile = piles[pileIndex]\n  const cardPileIndex = pile.findIndex(c => c.index === card.index)\n  return isDescending([\n    ...pile.map(c => c.value).slice(cardPileIndex, pile.length),\n  ])\n}\n\nexport const useWindowEvent = (event, callback) => {\n  useEffect(() => {\n    window.addEventListener(event, callback)\n    return () => window.removeEventListener(event, callback)\n  }, [event, callback])\n}\n","import React from 'react'\nimport { Motion, spring } from 'react-motion'\n\nexport const Card = ({\n  card,\n  activeCard,\n  onMouseDown,\n  onMouseUp,\n  cursorState,\n}) => {\n  const shouldFollowCursor =\n    cursorState.isPressed && card.isActive && card.canMove\n\n  const height = window.innerHeight / 15\n  const width = window.innerWidth / 7\n  const style = shouldFollowCursor\n    ? {\n        y:\n          cursorState.mouseY +\n          (activeCard\n            ? height * Math.abs(activeCard.cardPileIndex - card.cardPileIndex)\n            : -30),\n        x: cursorState.mouseX,\n        z: 99,\n      }\n    : {\n        y: spring(height + card.cardPileIndex * height),\n        x: spring(width / 1.8 + card.pileIndex * width),\n        z: 1,\n      }\n  return (\n    <Motion key={card.index} style={style}>\n      {({ x, y, z }) => (\n        <div\n          onPointerDown={onMouseDown.bind(null, card, x, y)}\n          onPointerUp={onMouseUp.bind(null, card, x, y)}\n          data-index={card.deckIndex}\n          className={`card spades rank${card.value} ${\n            card.isCheat ? 'is-cheat' : ''\n          } ${card.isActive ? 'is-active' : ''} ${\n            card.isEmpty ? 'empty' : ''\n          } ${shouldFollowCursor ? 'disable-touch' : ''}`}\n          style={{\n            transform: `translate3d(${x}px, ${y}px, 0)`,\n            zIndex: z,\n          }}\n        >\n          <div className=\"face\" />\n        </div>\n      )}\n    </Motion>\n  )\n}\n","import React, { useState } from 'react'\nimport {\n  shuffleDeck,\n  useWindowEvent,\n  moveCard,\n  getCanCardMove,\n  getCardIsActive,\n} from './utils'\nimport { Card } from './components/Card'\nimport './index.css'\n\nconst initialState = { startX: 0, startY: 0, mouseY: 0, mouseX: 0 }\n\nfunction App() {\n  const [activeCard, setActiveCard] = useState(null)\n  const [cursorState, setCursorState] = useState(initialState)\n  const [piles, setPiles] = useState([...shuffleDeck()])\n\n  const deck = piles.flat()\n\n  const onMouseDown = (card, mouseX, mouseY, e) => {\n    const { pageX: startX, pageY: startY } = e\n    if (activeCard) {\n      setPiles(moveCard(piles, activeCard, card))\n      setActiveCard(null)\n    } else if (\n      card.isActive ||\n      !card.canMove ||\n      (!activeCard && card.isEmpty)\n    ) {\n      setActiveCard(null)\n    } else {\n      setActiveCard(card)\n    }\n\n    setCursorState({\n      topDeltaY: startY - mouseY,\n      topDeltaX: startX - mouseX,\n      mouseY,\n      mouseX,\n      startX,\n      startY,\n      isPressed: true,\n      pressedIndex: card.deckIndex,\n    })\n  }\n\n  const onMouseMove = ({ pageY, pageX }) => {\n    const { isPressed, topDeltaY, topDeltaX } = cursorState\n\n    if (isPressed) {\n      const mouseY = pageY - topDeltaY\n      const mouseX = pageX - topDeltaX\n\n      setCursorState({ ...cursorState, mouseY, mouseX })\n    }\n  }\n\n  const onMouseUp = e => {\n    const diffX = Math.abs(cursorState.startX - e.pageX)\n    const diffY = Math.abs(cursorState.startY - e.pageY)\n\n    if (activeCard && cursorState.pressedIndex && diffX < 10 && diffY < 10) {\n    } else {\n      setActiveCard(null)\n    }\n\n    setCursorState({\n      ...cursorState,\n      isPressed: false,\n      pressedIndex: null,\n      topDeltaY: 0,\n    })\n  }\n\n  const onCardRelease = (clickedCard, x, y, e) => {\n    const elementUnder = document.elementFromPoint(e.clientX, e.clientY)\n    if (elementUnder && elementUnder.parentElement) {\n      const eventCardIndex = +elementUnder.parentElement.dataset.index\n      clickedCard = deck[eventCardIndex]\n    }\n\n    if (activeCard && clickedCard) {\n      setPiles(moveCard(piles, activeCard, clickedCard))\n    }\n  }\n\n  useWindowEvent('pointerup', onMouseUp)\n  useWindowEvent('pointermove', onMouseMove)\n\n  return piles.map((pile, pileIndex) =>\n    pile.length === 0 ? (\n      <Card\n        key={`pile-${pileIndex}`}\n        card={{ cardPileIndex: 0, pileIndex, isEmpty: true, canMove: true }}\n        onMouseUp={onCardRelease}\n        cursorState={cursorState}\n        onMouseDown={onMouseDown}\n      />\n    ) : (\n      pile.map((card, cardPileIndex) => (\n        <Card\n          key={`card-${card.index}`}\n          card={{\n            ...card,\n            isActive: getCardIsActive(activeCard, card, piles),\n            canMove: getCanCardMove(card, piles),\n            deckIndex: deck.findIndex(c => c.index === card.index),\n            pileIndex,\n            cardPileIndex,\n          }}\n          activeCard={activeCard}\n          cursorState={cursorState}\n          onMouseUp={onCardRelease}\n          onMouseDown={onMouseDown}\n        />\n      ))\n    ),\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}