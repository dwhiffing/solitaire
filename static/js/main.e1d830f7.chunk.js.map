{"version":3,"sources":["utils/index.js","components/Card.js","components/Empty.js","App.js","index.js"],"names":["CARDS","split","map","n","Number","flat","isDescending","numbers","filter","number","index","length","moveCard","piles","movedCard","destinationCard","destinationPileIndex","isEmpty","pileIndex","findIndex","pile","find","c","targetPile","targetPileIndex","cardPileIndex","sourcePile","indexInPile","card","numToMove","allowCheat","isCheat","value","movingCards","slice","m","console","log","Card","isActive","canMove","onDrag","height","onClick","useDrag","item","id","type","end","monitor","didDrop","targetCard","getDropResult","dragRef","useDrop","accept","drop","dropRef","className","style","ref","position","top","left","right","bottom","Empty","App","useState","activeCard","setActiveCard","chunk","shuffle","i","setPiles","onDragCard","sourceCard","onClickCard","clickedCard","margin","display","key","flexDirection","getCardIsActive","Math","max","activePile","ReactDOM","render","DndProvider","backend","Backend","document","getElementById"],"mappings":"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","file":"static/js/main.e1d830f7.chunk.js","sourcesContent":["import shuffle from 'lodash/shuffle'\nimport chunk from 'lodash/chunk'\n\nconst CARDS = '987654321'\n  .split('')\n  .map(n => Number(n))\n  .map(n => [n, n, n, n])\n  .flat()\n\nexport const shuffleDeck = () =>\n  chunk(\n    shuffle(CARDS).map((n, i) => ({\n      value: n,\n      index: i,\n    })),\n    6,\n  )\n\nexport const isDescending = numbers => {\n  return (\n    numbers.filter((number, index) => {\n      return numbers[index + 1] ? number === numbers[index + 1] + 1 : true\n    }).length === numbers.length\n  )\n}\n\nexport const moveCard = (piles, movedCard, destinationCard) => {\n  const destinationPileIndex = destinationCard.isEmpty\n    ? destinationCard.pileIndex\n    : piles.findIndex(pile => pile.find(c => c.index === destinationCard.index))\n\n  return piles.map((targetPile, targetPileIndex) => {\n    const cardPileIndex = piles.findIndex(pile =>\n      pile.find(c => c.index === movedCard.index),\n    )\n    const sourcePile = piles[cardPileIndex]\n    const indexInPile = sourcePile.findIndex(\n      card => card.index === movedCard.index,\n    )\n    const numToMove = sourcePile.length - indexInPile\n\n    const allowCheat =\n      numToMove === 1 && !movedCard.isCheat && !destinationCard.isCheat\n\n    const isCheat =\n      movedCard.value !== destinationCard.value - 1 && !destinationCard.isEmpty\n\n    const movingCards = sourcePile.slice(indexInPile, indexInPile + numToMove)\n    const validOrder =\n      destinationCard.isEmpty ||\n      (!destinationCard.isCheat &&\n        isDescending([destinationCard.value, ...movingCards.map(m => m.value)]))\n\n    if (validOrder || allowCheat) {\n      // remove the active movedCard from its pile\n      if (targetPileIndex === cardPileIndex) {\n        return targetPile.slice(0, targetPile.length - numToMove)\n      }\n\n      // add the active movedCard to the target pile\n      console.log(targetPileIndex, destinationCard, destinationPileIndex)\n      if (targetPileIndex === destinationPileIndex) {\n        return [...targetPile, ...movingCards.map(c => ({ ...c, isCheat }))]\n      }\n    }\n\n    return targetPile\n  })\n}\n","import React from 'react'\nimport { useDrag, useDrop } from 'react-dnd'\n\nexport const Card = ({\n  isActive,\n  isCheat,\n  canMove,\n  value,\n  index,\n  onDrag,\n  height,\n  onClick,\n}) => {\n  const [, dragRef] = useDrag({\n    item: { id: index, type: 'card' },\n    end: (item, monitor) => {\n      if (monitor.didDrop()) {\n        const targetCard = monitor.getDropResult()\n        onDrag({ value, index, isCheat }, targetCard)\n      }\n    },\n  })\n  const [, dropRef] = useDrop({\n    accept: 'card',\n    drop: () => ({ index, value, isCheat }),\n  })\n  return (\n    <div className=\"card-container\" style={{ height }} ref={dragRef}>\n      <div\n        className={`card spades rank${value} ${isCheat ? 'is-cheat' : ''} ${\n          isActive ? 'is-active' : ''\n        }`}\n        onClick={() => onClick({ value, index, isCheat, canMove })}\n        style={{ position: 'relative' }}\n      >\n        <div className=\"face\" />\n        <div\n          ref={dropRef}\n          style={{ position: 'absolute', top: 0, left: 0, right: 0, bottom: 0 }}\n        />\n      </div>\n    </div>\n  )\n}\n","import React from 'react'\nimport { useDrop } from 'react-dnd'\n\nexport const Empty = ({ index: pileIndex, onClick }) => {\n  const [, dropRef] = useDrop({\n    accept: 'card',\n    drop: () => ({ pileIndex, isEmpty: true, canMove: true }),\n  })\n\n  return (\n    <div style={{ height: 25 }}>\n      <div\n        ref={dropRef}\n        className=\"card empty\"\n        onClick={() => onClick({ pileIndex, canMove: true, isEmpty: true })}\n      />\n    </div>\n  )\n}\n","import React, { useState } from 'react'\nimport { shuffleDeck, moveCard, isDescending } from './utils'\nimport { Card } from './components/Card'\nimport { Empty } from './components/Empty'\nimport './index.css'\n\nfunction App() {\n  const [activeCard, setActiveCard] = useState(null)\n  const [piles, setPiles] = useState([...shuffleDeck()])\n\n  const onDragCard = (sourceCard, destinationCard) => {\n    if (\n      sourceCard &&\n      destinationCard &&\n      sourceCard.index !== destinationCard.index\n    ) {\n      setPiles(moveCard(piles, sourceCard, destinationCard))\n    }\n  }\n\n  const onClickCard = clickedCard => {\n    if (!clickedCard.canMove || (!activeCard && clickedCard.isEmpty)) {\n      return\n    }\n\n    if (!activeCard) {\n      return setActiveCard(clickedCard)\n    }\n\n    if (clickedCard.index === activeCard.index) {\n      return setActiveCard(null)\n    }\n\n    setPiles(moveCard(piles, activeCard, clickedCard))\n    setActiveCard(null)\n  }\n\n  return (\n    <div style={{ margin: '0 auto', display: 'flex' }}>\n      {piles.map((pile, pileIndex) => {\n        return (\n          <div\n            key={`pile-${pileIndex}`}\n            style={{ display: 'flex', margin: 10, flexDirection: 'column' }}\n          >\n            {pile.length === 0 ? (\n              <Empty index={pileIndex} onClick={onClickCard} />\n            ) : (\n              pile.map((card, cardPileIndex) => (\n                <Card\n                  key={`card-${card.index}`}\n                  isActive={getCardIsActive(activeCard, card, piles)}\n                  canMove={isDescending([\n                    ...pile.map(c => c.value).slice(cardPileIndex, pile.length),\n                  ])}\n                  height={`${2 * (7 / Math.max(pile.length, 7))}rem`}\n                  onClick={onClickCard}\n                  onDrag={onDragCard}\n                  value={card.value}\n                  index={card.index}\n                  isCheat={card.isCheat}\n                />\n              ))\n            )}\n          </div>\n        )\n      })}\n    </div>\n  )\n}\n\nexport default App\n\nfunction getCardIsActive(activeCard, card, piles) {\n  let isActive = false\n  if (activeCard) {\n    const { index } = activeCard\n    isActive = index === card.index\n    const activePile = piles.find(pile => pile.find(c => c.index === index))\n    const activeIndexInPile = activePile.findIndex(c => c.index === index)\n    const indexInPile = activePile.findIndex(c => c.index === card.index)\n    isActive = activeIndexInPile <= indexInPile\n  }\n  return isActive\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport Backend from 'react-dnd-html5-backend'\nimport { DndProvider } from 'react-dnd'\n\nReactDOM.render(\n  <DndProvider backend={Backend}>\n    <App />\n  </DndProvider>,\n  document.getElementById('root'),\n)\n"],"sourceRoot":""}