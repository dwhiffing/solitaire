{"version":3,"sources":["utils/index.js","components/Card.js","components/Header.js","App.js","index.js"],"names":["CARDS","split","map","n","value","Number","suit","flat","shuffleDeck","concat","chunk","shuffle","pile","pileIndex","i","cardPileIndex","c","index","isDescending","numbers","filter","number","length","moveCard","cards","movedCard","destinationCard","sourcePile","getCardPile","isFinished","numToMove","allowCheat","isCheat","isEmpty","movingCards","slice","validOrder","m","card","includes","isNaN","findIndex","getCardIsActive","activeCard","isActive","sort","a","b","getBottomCard","decorateCard","getCanCardMove","bottom","useWindowEvent","event","callback","useEffect","window","addEventListener","removeEventListener","getCardFromPoint","x","y","elementUnder","document","elementFromPoint","parentElement","dataIndex","dataset","emptyCard","pileindex","getCardPosition","canMove","useTimer","timeStopped","useRef","Date","now","intervalRef","useState","startTime","timeGone","difference","state","setState","startTimer","current","setInterval","stopTimer","clearInterval","hidden","minutes","Math","floor","seconds","reset","getCardSpacing","querySelector","outerWidth","min","documentElement","clientWidth","cardWidth","xBuffer","width","height","max","innerHeight","yBuffer","leftoverSpace","SUITS","config","stiffness","damping","Card","onRest","mouseX","mouseY","isPressed","xPos","yPos","shouldFollowCursor","yOffset","abs","spring","r","s","zIndex","style","transform","DisplayCard","classes","data-index","data-pileindex","className","join","position","top","left","Header","onReset","hasWon","winRef","timer","setTimeout","alert","textAlign","toString","padStart","onClick","confirm","initialState","App","setActiveCard","cursorState","setCursorState","startRef","deltaRef","finishedPiles","setFinishedPiles","pressed","setPressed","setCards","setHasWon","newFinishedPiles","Object","values","groupBy","checkForFinishedPiles","debounce","setValue","useForceUpdate","clientX","clientY","diffX","diffY","passedThreshold","clickedCard","bottomCard","key","cardIndex","ReactDOM","render","getElementById"],"mappings":"mPAOMA,EAFS,YAEMC,MAAM,IACxBC,KAAI,SAAAC,GAAC,MAAI,CACR,CAAEC,MAAOC,OAAOF,GAAIG,KAAM,GAC1B,CAAEF,MAAOC,OAAOF,GAAIG,KAAM,GAC1B,CAAEF,MAAOC,OAAOF,GAAIG,KAAM,GAC1B,CAAEF,MAAOC,OAAOF,GAAIG,KAAM,OAE3BC,OAMUC,GAfE,YAWoBP,MAAM,IACtCC,KAAI,SAAAC,GAAC,MAAK,CAAEC,MAAOC,OAAOF,GAAIG,KAAM,MACpCG,OAbY,YAaER,MAAM,IAAIC,KAAI,SAAAC,GAAC,MAAK,CAAEC,MAAOC,OAAOF,GAAIG,KAAM,OAEpC,kBACzBI,IAAMC,IAAQX,GAAQ,GACnBE,KAAI,SAACU,EAAMC,GAAP,OACHD,EAAKV,KAAI,SAACC,EAAGW,GAAJ,sBACJX,EADI,CAEPY,cAAeD,EACfD,oBAGHN,OACAL,KAAI,SAACc,EAAGF,GAAJ,sBAAgBE,EAAhB,CAAmBC,MAAOH,SAEtBI,EAAe,SAAAC,GAC1B,OACEA,EAAQC,QAAO,SAACC,EAAQJ,GACtB,OAAOE,EAAQF,EAAQ,IAAKI,IAAWF,EAAQF,EAAQ,GAAK,KAC3DK,SAAWH,EAAQG,QAIbC,EAAW,SAACC,EAAOC,EAAWC,GACzC,IAAMC,EAAaC,EAAYH,EAAWD,GAC1C,GAAIC,EAAUI,aAAeH,GAAmBA,EAAgBG,WAC9D,OAAOL,EAGT,IAAMM,EAAYH,EAAWL,OAASG,EAAUV,cAC1CgB,EACU,IAAdD,IAAoBL,EAAUO,UAAYN,EAAgBM,QACtDA,EACJP,EAAUrB,QAAUsB,EAAgBtB,MAAQ,IAAMsB,EAAgBO,QAE9DC,EAAcP,EAAWQ,MAC7BV,EAAUV,cACVU,EAAUV,cAAgBe,GAGtBM,EACJV,EAAgBO,UACdP,EAAgBM,SAChBd,EAAa,CAACQ,EAAgBtB,OAAlB,mBAA4B8B,EAAYhC,KAAI,SAAAmC,GAAC,OAAIA,EAAEjC,YAEnE,OAAOoB,EAAMtB,KAAI,SAAAoC,GACf,GACEA,EAAKzB,YAAcY,EAAUZ,WAC7BY,EAAUZ,YAAca,EAAgBb,UAExC,OAAOyB,EAGT,IAAKJ,EAAYhC,KAAI,SAAAc,GAAC,OAAIA,EAAEC,SAAOsB,SAASD,EAAKrB,OAC/C,OAAOqB,EAGT,IACGF,GAAcL,KACd1B,OAAOmC,MAAMd,EAAgBb,WAC9B,CACA,IAAME,EACJW,EAAgBX,cAChBmB,EAAYO,WAAU,SAAAzB,GAAC,OAAIA,EAAEC,QAAUqB,EAAKrB,SAC5C,EAEF,OAAO,eACFqB,EADL,CAEEzB,UAAWa,EAAgBb,UAC3BE,gBACAiB,YAIJ,OAAOM,MAkBJ,SAASI,EAAgBC,EAAYL,GAC1C,IAAIM,GAAW,EAQf,OANID,IACFC,EACED,EAAW9B,YAAcyB,EAAKzB,WAC9B8B,EAAW5B,eAAiBuB,EAAKvB,eAG9B6B,EAGF,IAAMhB,EAAc,SAACU,EAAMd,GAEhC,OADaA,EAAMJ,QAAO,SAAAJ,GAAC,OAAIA,EAAEH,YAAcyB,EAAKzB,aACxCgC,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAE/B,cAAgBgC,EAAEhC,kBAGpCiC,EAAgB,SAACV,EAAMd,GAClC,IAAKc,EACH,OAAO,KAGT,GAAIA,EAAKL,QACP,OAAOK,EAGT,IAAM1B,EAAOgB,EAAYU,EAAMd,GAE/B,OADAc,EAAO1B,EAAKA,EAAKU,OAAS,GACnB2B,EAAaX,EAAMd,IAGf0B,EAAiB,SAACZ,EAAMd,GACnC,IAAMZ,EAAOgB,EAAYU,EAAMd,GACzB2B,EAASvC,EAAKV,KAAI,SAAAc,GAAC,OAAIA,EAAEZ,SAAO+B,MAAMG,EAAKvB,cAAeH,EAAKU,QACrE,OAAOJ,EAAaiC,IAGTC,EAAiB,SAACC,EAAOC,GACpCC,qBAAU,WAER,OADAC,OAAOC,iBAAiBJ,EAAOC,GACxB,kBAAME,OAAOE,oBAAoBL,EAAOC,MAC9C,CAACD,EAAOC,KAUAK,EAAmB,SAACC,EAAGC,EAAGrC,GACrC,IAAIc,EACEwB,EAAeC,SAASC,iBAAiBJ,EAAGC,GAElD,GAAIC,GAAgBA,EAAaG,cAAe,CAC9C,IAAMC,EAAYJ,EAAaG,cAAcE,QAAQlD,MAErD,GAAIiD,EACF5B,EAAOd,GAAO0C,OACT,CACL,IAAIE,EAAY,CACdrD,eAAgB,EAChBF,WAAYiD,EAAaG,cAAcE,QAAQE,UAC/CpC,SAAS,GAIX,GAAoB,IAFPL,EAAYwC,EAAW5C,GAE3BF,OACP,OAAO,eAAK8C,EAAZ,GAA0BE,EAAgBF,KAKhD,OAAOnB,EAAaX,EAAMd,IAGtByB,EAAe,SAACX,EAAMd,GAAP,OACnBc,EAAI,eAEKA,EAFL,GAGKgC,EAAgBhC,GAHrB,CAIEiC,QAASrB,EAAeZ,EAAMd,GAC9BoB,SAAUF,EAAgBJ,EAAMd,KAElC,MAOOgD,EAAW,WACtB,IAjD+BnB,EAAOC,EAiDhCmB,EAAcC,iBAAOC,KAAKC,OAC1BC,EAAcH,mBAFQ,EAGFI,mBAAS,CACjCC,UAAWJ,KAAKC,MAChBI,SAAU,EACVC,WAAY,IANc,mBAGrBC,EAHqB,KAGdC,EAHc,KAStBC,EAAa,WACjBD,GAAS,SAAAD,GAAK,sBACTA,EADS,CAEZF,SAAUE,EAAMF,UAAYL,KAAKC,MAAQH,EAAYY,cAGvDR,EAAYQ,QAAUC,aAAY,WAChCH,GAAS,SAAAD,GAAK,sBACTA,EADS,CAEZD,WAAYN,KAAKC,MAAQM,EAAMH,UAAYG,EAAMF,gBAElD,MAGCO,EAAY,WAChBd,EAAYY,QAAUV,KAAKC,MAC3BY,cAAcX,EAAYQ,UAY5B,OATA9B,qBAAU,WAER,OADA6B,IACOG,IACN,IA/E4BlC,EAiFd,mBAjFqBC,EAiFD,kBACnCS,SAAS0B,OAASF,IAAcH,KAjFlC7B,qBAAU,WAER,OADAQ,SAASN,iBAAiBJ,EAAOC,GAC1B,kBAAMS,SAASL,oBAAoBL,EAAOC,MAChD,CAACD,EAAOC,IAiFJ,CACLoC,QAASC,KAAKC,MAAOV,EAAMD,WAAa,IAAO,GAAM,IACrDY,QAASF,KAAKC,MAAOV,EAAMD,WAAa,IAAQ,IAChDa,MAAO,WACLrB,EAAYY,QAAUV,KAAKC,MAE3BO,EAAS,CACPJ,UAAWJ,KAAKC,MAChBI,SAAU,EACVC,WAAY,OAMPc,EAAiB,WAC5B,IAAMzD,EAAOyB,SAASiC,cAAc,SAChCC,EAAaN,KAAKO,IAAInC,SAASoC,gBAAgBC,YAAa,KAC1DC,EAAY/D,EAAOA,EAAK8D,YAAcH,EAAa,EACnDK,GAAWL,EAAyB,EAAZI,GAAiB,EACzCE,EAAQF,EAAYC,EAEtBE,EAASb,KAAKO,IAAI,GAAIP,KAAKc,IAAIjD,OAAOkD,YAAc,GAAI,KACxDC,EAAUhB,KAAKO,IAAI,IAAKP,KAAKc,IAAIjD,OAAOkD,YAAc,EAAG,KAO7D,OALI3C,SAASoC,gBAAgBC,YAAc,MAEzCO,EAAmB,GADnBH,EAASb,KAAKO,IAAI,GAAIP,KAAKc,IAAIjD,OAAOkD,YAAc,GAAI,OAInD,CAAEH,QAAOC,SAAQG,UAASL,YAGtBhC,EAAkB,SAAAhC,GAAS,IAAD,EACOyD,IAApCQ,EAD6B,EAC7BA,MAAOC,EADsB,EACtBA,OAAQG,EADc,EACdA,QAASL,EADK,EACLA,QAE1BM,GADa7C,SAASoC,gBAAgBC,YACA,EAARG,GAAa,EAAID,EAAU,EAO/D,MAAO,CAAE1C,EALC0C,EAAUhE,EAAKzB,UAAY0F,EAAQK,EAKjC/C,EAJFvB,EAAKL,QACX0E,EACAA,GAAWrE,EAAKT,WAAa,EAAIS,EAAKvB,cAAgByF,K,OCpRtDK,EAAQ,CAAC,SAAU,QAAS,SAAU,YAEtCC,EAAS,CAAEC,UAAW,IAAKC,QAAS,IAE7BC,EAAO,SAAC,GAOd,IANL3E,EAMI,EANJA,KACAK,EAKI,EALJA,WAKI,IAJJuE,cAII,MAJK,aAIL,MAHJC,cAGI,MAHK,EAGL,MAFJC,cAEI,MAFK,EAEL,EADJC,EACI,EADJA,UAEQb,EAAWT,IAAXS,OADJ,EAEyBlC,EAAgBhC,GAAlCgF,EAFP,EAEI1D,EAAY2D,EAFhB,EAEa1D,EAEX2D,EAAqBlF,EAAKM,UAAYyE,EAEtCI,EAAUD,EACZhB,EAASb,KAAK+B,IAAI/E,EAAW5B,cAAgBuB,EAAKvB,eAClD,EAEE6C,EAAI4D,EAAqBL,EAASQ,iBAAOL,EAAMR,GAC/CjD,EAAI2D,EAAqBJ,EAASK,EAAUE,iBAAOJ,EAAMT,GACzDc,EAAID,iBAAOrF,EAAKN,QAAU,GAAK,EAAG8E,GAClCe,EAAIF,iBAAOrF,EAAKM,SAAW,MAAQ,EAAGkE,GACtCgB,EAASN,EACX,GAAKlF,EAAKvB,cACVuB,EAAKvB,cAET,OACE,kBAAC,SAAD,CAAQgH,MAAO,CAAEnE,IAAGC,IAAG+D,IAAGC,KAAKX,OAAQA,IACpC,gBAAGtD,EAAH,EAAGA,EAAGC,EAAN,EAAMA,EAAG+D,EAAT,EAASA,EAAGC,EAAZ,EAAYA,EAAZ,OACC,kBAAC,EAAD,CACEvF,KAAMA,EACNyF,MAAO,CACLC,UAAU,eAAD,OAAiBpE,EAAjB,eAAyBC,EAAzB,yBAA2C+D,EAA3C,sBAA0DC,EAA1D,KACTC,gBAQNG,EAAc,SAAC,GAA0B,IAAxB3F,EAAuB,EAAvBA,KAAuB,IAAjByF,aAAiB,MAAT,GAAS,EACtCG,EAAU,CACd,OADc,cAEP5F,EAAKlC,OACZkC,EAAKT,YAAc,WACnBS,EAAKiC,SAAW,WAChBjC,EAAKM,UAAY,gBACjBN,EAAKL,SAAW,QAChB4E,EAAMvE,EAAKhC,OAGb,OACE,yBACE6H,aAAY7F,EAAKrB,MACjBmH,iBAAgB9F,EAAKzB,UACrBwH,UAAWH,EAAQI,KAAK,KACxBP,MAAOA,GAEP,yBAAKM,UAAU,SACf,yBAAKA,UAAU,SACf,yBACEA,UAAU,QACVN,MAAO,CACLQ,SAAU,WACVC,IAAK,EACLC,KAAM,OACNjC,OAAQ,OACRD,MAAO,Y,0BCvEV,SAASmC,EAAT,GAAsC,IAApBC,EAAmB,EAAnBA,QAASC,EAAU,EAAVA,OAC1BC,EAASnE,kBAAO,GAChBoE,EAAQtE,IAgBd,OAdAjB,qBAAU,WACJqF,IAAWC,EAAOxD,UACpBwD,EAAOxD,SAAU,EACjB0D,YAAW,WACTC,MAAM,gCAAD,OAC6BF,EAAMpD,QADnC,qBACuDoD,EAAMjD,QAD7D,aAGLiD,EAAMhD,QACN6C,IACAE,EAAOxD,SAAU,IAChB,QAEJ,CAACuD,EAAQD,EAASG,IAGnB,oCACE,yBAAKf,MAAO,CAAExB,MAAO,KACnB,4CAGF,yBAAKwB,MAAO,CAAExB,MAAO,GAAI0C,UAAW,WAClC,wCACMH,EAAMpD,QAAQwD,WAAWC,SAAS,EAAG,KACvC,KAFJ,OAEUL,EAAMjD,QAAQqD,WAAWC,SAAS,EAAG,QAIjD,yBAAKpB,MAAO,CAAExB,MAAO,GAAI0C,UAAW,WAClC,0BACEG,QAAS,WACK5F,OAAO6F,QAAQ,uBAEzBV,IACAG,EAAMhD,WALZ,OClBR,IAAMwD,EAAe,CAAElC,OAAQ,EAAGD,OAAQ,GAqH3BoC,MAnHf,WAAgB,IAAD,EACuBzE,mBAAS,MADhC,mBACNnC,EADM,KACM6G,EADN,OAEyB1E,mBAASwE,GAFlC,mBAENG,EAFM,KAEOC,EAFP,KAGPC,EAAWjF,iBAAO,CAAEd,EAAG,EAAGC,EAAG,IAC7B+F,EAAWlF,iBAAO,CAAEd,EAAG,EAAGC,EAAG,IAJtB,EAK6BiB,mBAAS,IALtC,mBAKN+E,EALM,KAKSC,EALT,OAMiBhF,oBAAS,GAN1B,mBAMNiF,EANM,KAMGC,EANH,OAOalF,mBAAStE,KAPtB,mBAONgB,EAPM,KAOCyI,EAPD,OAQenF,oBAAS,GARxB,mBAQN8D,EARM,KAQEsB,EARF,KA2Eb,OAjEA3G,qBAAU,WACR,IAAM4G,EHiE2B,SAAA3I,GAKnC,OAJc4I,OAAOC,OACnBC,IAAQ9I,GAAO,SAAAc,GAAI,OAAIA,EAAKzB,cAC5BX,KAAI,SAAAU,GAAI,OAAIA,EAAKiC,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAE/B,cAAgBgC,EAAEhC,oBAGnDb,KAAI,SAAAU,GAAI,MAAK,CACZA,KAAMA,EAAKV,KAAI,SAAAoC,GAAI,OAAIA,EAAKlC,SAAOkI,KAAK,IACxCrH,MAAOL,EAAK,GAAGC,cAEhBO,QAAO,kBAAuB,cAAvB,EAAGR,QACVV,KAAI,SAAAU,GAAI,OAAIA,EAAKK,SG5EOsJ,CAAsB/I,GAC1CoH,GAAUuB,EAAiB7I,SAAWuI,EAAcvI,SACnD6I,EAAiB7I,QAAU,GAC7B4I,GAAU,GAEZnB,YAAW,kBAAMe,EAAiBK,KAAmB,QAEtD,CAAC3I,EAAOqI,EAAejB,IAoD1BxF,EAAe,SAAUoH,IH2GG,WAAO,IAAD,EACb1F,mBAAS,GAArB2F,EADyB,oBAElC,OAAO,kBAAMA,GAAS,SAAArK,GAAK,QAAMA,MG7GCsK,GAAkB,MACpDtH,EAAe,aArBG,SAAC,GAA0B,IAAxBuH,EAAuB,EAAvBA,QAASC,EAAc,EAAdA,QACtBC,EAAQlF,KAAK+B,IAAIiC,EAAStE,QAAQzB,EAAI+G,GACtCG,EAAQnF,KAAK+B,IAAIiC,EAAStE,QAAQxB,EAAI+G,GACtCG,EAAkBF,EAAQ,IAAMC,EAAQ,GAK9C,GAHAlB,EAASvE,QAAU,CAAEzB,EAAG,EAAGC,EAAG,GAC9BmG,GAAW,GAEPrH,EAAY,CACd,IAAIqI,EAAcrH,EAAiBgH,EAASC,EAASpJ,IACrDwJ,EAAchI,EAAcgI,EAAaxJ,KAEvCyI,EAAS1I,EAASC,EAAOmB,EAAYqI,IAEnCD,GACFvB,EAAc,UAOpBpG,EAAe,eApDK,SAAC,GAA0B,IAAxBuH,EAAuB,EAAvBA,QAASC,EAAc,EAAdA,QAC1BtI,EAAOqB,EAAiBgH,EAASC,EAASpJ,GAE9C,IAAKc,EACH,OAAOkH,EAAc,MAGvB,GAAI7G,EAAY,CACd,IAAMsI,EAAajI,EAAcV,EAAMd,GACvCyI,EAAS1I,EAASC,EAAOmB,EAAYsI,IAErCzB,EAAc,WACJlH,EAAKM,UAAYN,EAAKiC,SAChCiF,EAAclH,GAEhB,IAAM8E,EAAS9E,EAAKuB,EACdsD,EAAS7E,EAAKsB,EACpB+F,EAAStE,QAAU,CAAEzB,EAAG+G,EAAS9G,EAAG+G,GACpChB,EAASvE,QAAU,CAAEzB,EAAG+G,EAAUrI,EAAKsB,EAAGC,EAAG+G,EAAUtI,EAAKuB,GAC5DmG,GAAW,GAEXN,EAAe,CAAEvC,SAAQC,cAgC3BhE,EAAe,eA7BK,SAAC,GAA0B,IAAxBwH,EAAuB,EAAvBA,QAASD,EAAc,EAAdA,QACxBvD,EAASwD,EAAUhB,EAASvE,QAAQxB,EACpCsD,EAASwD,EAAUf,EAASvE,QAAQzB,EAC1C8F,EAAe,CAAEtC,SAAQD,cA6BzB,yBAAKkB,UAAU,aACb,kBAACK,EAAD,CACEE,OAAQA,EACRD,QAAS,WACPsB,EAASzJ,KACT0J,GAAU,MAIb,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAGhK,KAAI,SAAAC,GAAC,OACvB,kBAAC,EAAD,CACE+K,IAAG,eAAU/K,GACbmC,KAAM,CACJvB,eAAgB,EAChBF,UAAWV,EACX8B,SAAS,QAKdT,EAAMtB,KAAI,SAACoC,EAAM6I,GAAP,OACT,kBAAC,EAAD,CACED,IAAG,eAAUC,GACb7I,KAAI,eACCA,EADD,CAEFM,SAAUF,EAAgBC,EAAYL,GACtCiC,QAASrB,EAAeZ,EAAMd,GAC9BK,WAAYgI,EAActH,SAASD,EAAKzB,aAE1C8B,WAAYA,EACZ0E,UAAW0C,EACX5C,OAAQsC,EAAYtC,OACpBC,OAAQqC,EAAYrC,cC3H9BgE,IAASC,OAAO,kBAAC,EAAD,MAAStH,SAASuH,eAAe,U","file":"static/js/main.4a6f01d5.chunk.js","sourcesContent":["import shuffle from 'lodash/shuffle'\nimport chunk from 'lodash/chunk'\nimport { useEffect, useState, useRef } from 'react'\nimport groupBy from 'lodash/groupBy'\n\nconst VALUES = '987654321'\n\nconst CARDS = VALUES.split('')\n  .map(n => [\n    { value: Number(n), suit: 0 },\n    { value: Number(n), suit: 1 },\n    { value: Number(n), suit: 2 },\n    { value: Number(n), suit: 3 },\n  ])\n  .flat()\n\nexport const SORTED_CARDS = VALUES.split('')\n  .map(n => ({ value: Number(n), suit: 0 }))\n  .concat(VALUES.split('').map(n => ({ value: Number(n), suit: 1 })))\n\nexport const shuffleDeck = () =>\n  chunk(shuffle(CARDS), 6)\n    .map((pile, pileIndex) =>\n      pile.map((n, i) => ({\n        ...n,\n        cardPileIndex: i,\n        pileIndex,\n      })),\n    )\n    .flat()\n    .map((c, i) => ({ ...c, index: i }))\n\nexport const isDescending = numbers => {\n  return (\n    numbers.filter((number, index) => {\n      return numbers[index + 1] ? number === numbers[index + 1] + 1 : true\n    }).length === numbers.length\n  )\n}\n\nexport const moveCard = (cards, movedCard, destinationCard) => {\n  const sourcePile = getCardPile(movedCard, cards)\n  if (movedCard.isFinished || !destinationCard || destinationCard.isFinished) {\n    return cards\n  }\n\n  const numToMove = sourcePile.length - movedCard.cardPileIndex\n  const allowCheat =\n    numToMove === 1 && !movedCard.isCheat && !destinationCard.isCheat\n  const isCheat =\n    movedCard.value !== destinationCard.value - 1 && !destinationCard.isEmpty\n\n  const movingCards = sourcePile.slice(\n    movedCard.cardPileIndex,\n    movedCard.cardPileIndex + numToMove,\n  )\n\n  const validOrder =\n    destinationCard.isEmpty ||\n    (!destinationCard.isCheat &&\n      isDescending([destinationCard.value, ...movingCards.map(m => m.value)]))\n\n  return cards.map(card => {\n    if (\n      card.pileIndex !== movedCard.pileIndex ||\n      movedCard.pileIndex === destinationCard.pileIndex\n    ) {\n      return card\n    }\n\n    if (!movingCards.map(c => c.index).includes(card.index)) {\n      return card\n    }\n\n    if (\n      (validOrder || allowCheat) &&\n      !Number.isNaN(destinationCard.pileIndex)\n    ) {\n      const cardPileIndex =\n        destinationCard.cardPileIndex +\n        movingCards.findIndex(c => c.index === card.index) +\n        1\n\n      return {\n        ...card,\n        pileIndex: destinationCard.pileIndex,\n        cardPileIndex,\n        isCheat,\n      }\n    }\n\n    return card\n  })\n}\n\nexport const checkForFinishedPiles = cards => {\n  const piles = Object.values(\n    groupBy(cards, card => card.pileIndex),\n  ).map(pile => pile.sort((a, b) => a.cardPileIndex - b.cardPileIndex))\n\n  return piles\n    .map(pile => ({\n      pile: pile.map(card => card.value).join(''),\n      index: pile[0].pileIndex,\n    }))\n    .filter(({ pile }) => pile === '987654321')\n    .map(pile => pile.index)\n}\n\nexport function getCardIsActive(activeCard, card) {\n  let isActive = false\n\n  if (activeCard) {\n    isActive =\n      activeCard.pileIndex === card.pileIndex &&\n      activeCard.cardPileIndex <= card.cardPileIndex\n  }\n\n  return isActive\n}\n\nexport const getCardPile = (card, cards) => {\n  const pile = cards.filter(c => c.pileIndex === card.pileIndex)\n  return pile.sort((a, b) => a.cardPileIndex - b.cardPileIndex)\n}\n\nexport const getBottomCard = (card, cards) => {\n  if (!card) {\n    return null\n  }\n\n  if (card.isEmpty) {\n    return card\n  }\n\n  const pile = getCardPile(card, cards)\n  card = pile[pile.length - 1]\n  return decorateCard(card, cards)\n}\n\nexport const getCanCardMove = (card, cards) => {\n  const pile = getCardPile(card, cards)\n  const bottom = pile.map(c => c.value).slice(card.cardPileIndex, pile.length)\n  return isDescending(bottom)\n}\n\nexport const useWindowEvent = (event, callback) => {\n  useEffect(() => {\n    window.addEventListener(event, callback)\n    return () => window.removeEventListener(event, callback)\n  }, [event, callback])\n}\n\nexport const useDocumentEvent = (event, callback) => {\n  useEffect(() => {\n    document.addEventListener(event, callback)\n    return () => document.removeEventListener(event, callback)\n  }, [event, callback])\n}\n\nexport const getCardFromPoint = (x, y, cards) => {\n  let card\n  const elementUnder = document.elementFromPoint(x, y)\n\n  if (elementUnder && elementUnder.parentElement) {\n    const dataIndex = elementUnder.parentElement.dataset.index\n\n    if (dataIndex) {\n      card = cards[+dataIndex]\n    } else {\n      let emptyCard = {\n        cardPileIndex: -1,\n        pileIndex: +elementUnder.parentElement.dataset.pileindex,\n        isEmpty: true,\n      }\n      const pile = getCardPile(emptyCard, cards)\n\n      if (pile.length === 0) {\n        return { ...emptyCard, ...getCardPosition(emptyCard) }\n      }\n    }\n  }\n\n  return decorateCard(card, cards)\n}\n\nconst decorateCard = (card, cards) =>\n  card\n    ? {\n        ...card,\n        ...getCardPosition(card),\n        canMove: getCanCardMove(card, cards),\n        isActive: getCardIsActive(card, cards),\n      }\n    : null\n\nexport const useForceUpdate = () => {\n  const [, setValue] = useState(0)\n  return () => setValue(value => ++value)\n}\n\nexport const useTimer = () => {\n  const timeStopped = useRef(Date.now())\n  const intervalRef = useRef()\n  const [state, setState] = useState({\n    startTime: Date.now(),\n    timeGone: 0,\n    difference: 0,\n  })\n\n  const startTimer = () => {\n    setState(state => ({\n      ...state,\n      timeGone: state.timeGone + (Date.now() - timeStopped.current),\n    }))\n\n    intervalRef.current = setInterval(() => {\n      setState(state => ({\n        ...state,\n        difference: Date.now() - state.startTime - state.timeGone,\n      }))\n    }, 100)\n  }\n\n  const stopTimer = () => {\n    timeStopped.current = Date.now()\n    clearInterval(intervalRef.current)\n  }\n\n  useEffect(() => {\n    startTimer()\n    return stopTimer\n  }, [])\n\n  useDocumentEvent('visibilitychange', () =>\n    document.hidden ? stopTimer() : startTimer(),\n  )\n\n  return {\n    minutes: Math.floor((state.difference / 1000 / 60) % 60),\n    seconds: Math.floor((state.difference / 1000) % 60),\n    reset: () => {\n      timeStopped.current = Date.now()\n\n      setState({\n        startTime: Date.now(),\n        timeGone: 0,\n        difference: 0,\n      })\n    },\n  }\n}\n\nexport const getCardSpacing = () => {\n  const card = document.querySelector('.card')\n  let outerWidth = Math.min(document.documentElement.clientWidth, 740)\n  const cardWidth = card ? card.clientWidth : outerWidth / 6\n  const xBuffer = (outerWidth - cardWidth * 6) / 7\n  const width = cardWidth + xBuffer\n\n  let height = Math.min(28, Math.max(window.innerHeight / 16, 25))\n  let yBuffer = Math.min(200, Math.max(window.innerHeight / 8, 40))\n\n  if (document.documentElement.clientWidth > 900) {\n    height = Math.min(50, Math.max(window.innerHeight / 16, 25))\n    yBuffer = height * 3\n  }\n\n  return { width, height, yBuffer, xBuffer }\n}\n\nexport const getCardPosition = card => {\n  const { width, height, yBuffer, xBuffer } = getCardSpacing()\n  const outerWidth = document.documentElement.clientWidth\n  const leftoverSpace = (outerWidth - width * 6) / 2 - xBuffer / 2\n\n  const x = xBuffer + card.pileIndex * width + leftoverSpace\n  const y = card.isEmpty\n    ? yBuffer\n    : yBuffer + (card.isFinished ? 0 : card.cardPileIndex * height)\n\n  return { x, y }\n}\n","import React from 'react'\nimport { Motion, spring } from 'react-motion'\nimport { getCardPosition, getCardSpacing } from '../utils'\nconst SUITS = ['spades', 'clubs', 'hearts', 'diamonds']\n\nconst config = { stiffness: 200, damping: 20 }\n\nexport const Card = ({\n  card,\n  activeCard,\n  onRest = () => {},\n  mouseX = 0,\n  mouseY = 0,\n  isPressed,\n}) => {\n  const { height } = getCardSpacing()\n  const { x: xPos, y: yPos } = getCardPosition(card)\n\n  const shouldFollowCursor = card.isActive && isPressed\n\n  const yOffset = shouldFollowCursor\n    ? height * Math.abs(activeCard.cardPileIndex - card.cardPileIndex)\n    : 0\n\n  const x = shouldFollowCursor ? mouseX : spring(xPos, config)\n  const y = shouldFollowCursor ? mouseY + yOffset : spring(yPos, config)\n  const r = spring(card.isCheat ? 22 : 0, config)\n  const s = spring(card.isActive ? 1.185 : 1, config)\n  const zIndex = shouldFollowCursor\n    ? 35 + card.cardPileIndex\n    : card.cardPileIndex\n\n  return (\n    <Motion style={{ x, y, r, s }} onRest={onRest}>\n      {({ x, y, r, s }) => (\n        <DisplayCard\n          card={card}\n          style={{\n            transform: `translate3d(${x}px, ${y}px, 0) rotate(${r}deg) scale(${s})`,\n            zIndex,\n          }}\n        />\n      )}\n    </Motion>\n  )\n}\n\nconst DisplayCard = ({ card, style = {} }) => {\n  const classes = [\n    'card',\n    `rank${card.value}`,\n    card.isFinished && 'finished',\n    card.canMove && 'can-move',\n    card.isActive && 'disable-touch',\n    card.isEmpty && 'empty',\n    SUITS[card.suit],\n  ]\n\n  return (\n    <div\n      data-index={card.index}\n      data-pileindex={card.pileIndex}\n      className={classes.join(' ')}\n      style={style}\n    >\n      <div className=\"face\" />\n      <div className=\"back\" />\n      <div\n        className=\"click\"\n        style={{\n          position: 'absolute',\n          top: 0,\n          left: '-40%',\n          height: '160%',\n          width: '170%',\n        }}\n      />\n    </div>\n  )\n}\n","import React, { useEffect, useRef } from 'react'\nimport { useTimer } from '../utils'\n\nexport function Header({ onReset, hasWon }) {\n  const winRef = useRef(false)\n  const timer = useTimer()\n\n  useEffect(() => {\n    if (hasWon && !winRef.current) {\n      winRef.current = true\n      setTimeout(() => {\n        alert(\n          `You win! Your final time was ${timer.minutes} minutes, ${timer.seconds} seconds`,\n        )\n        timer.reset()\n        onReset()\n        winRef.current = false\n      }, 1000)\n    }\n  }, [hasWon, onReset, timer])\n\n  return (\n    <>\n      <div style={{ width: 80 }}>\n        <span>Solitaire</span>\n      </div>\n\n      <div style={{ width: 80, textAlign: 'center' }}>\n        <span>\n          {`${timer.minutes.toString().padStart(2, '0') +\n            ':'}${timer.seconds.toString().padStart(2, '0')}`}\n        </span>\n      </div>\n\n      <div style={{ width: 80, textAlign: 'center' }}>\n        <span\n          onClick={() => {\n            const yes = window.confirm('Start a new game?')\n            if (yes) {\n              onReset()\n              timer.reset()\n            }\n          }}\n        >\n          +\n        </span>\n      </div>\n    </>\n  )\n}\n","import React, { useState, useEffect, useRef } from 'react'\nimport {\n  shuffleDeck,\n  useWindowEvent,\n  moveCard,\n  getCanCardMove,\n  getCardIsActive,\n  getCardFromPoint,\n  useForceUpdate,\n  getBottomCard,\n  checkForFinishedPiles,\n} from './utils'\nimport { Card } from './components/Card'\nimport './index.css'\nimport debounce from 'lodash/debounce'\nimport { Header } from './components/Header'\n\nconst initialState = { mouseY: 0, mouseX: 0 }\n\nfunction App() {\n  const [activeCard, setActiveCard] = useState(null)\n  const [cursorState, setCursorState] = useState(initialState)\n  const startRef = useRef({ x: 0, y: 0 })\n  const deltaRef = useRef({ x: 0, y: 0 })\n  const [finishedPiles, setFinishedPiles] = useState([])\n  const [pressed, setPressed] = useState(false)\n  const [cards, setCards] = useState(shuffleDeck())\n  const [hasWon, setHasWon] = useState(false)\n\n  useEffect(() => {\n    const newFinishedPiles = checkForFinishedPiles(cards)\n    if (!hasWon && newFinishedPiles.length !== finishedPiles.length) {\n      if (newFinishedPiles.length >= 4) {\n        setHasWon(true)\n      }\n      setTimeout(() => setFinishedPiles(newFinishedPiles), 500)\n    }\n  }, [cards, finishedPiles, hasWon])\n\n  const onMouseDown = ({ clientX, clientY }) => {\n    let card = getCardFromPoint(clientX, clientY, cards)\n\n    if (!card) {\n      return setActiveCard(null)\n    }\n\n    if (activeCard) {\n      const bottomCard = getBottomCard(card, cards)\n      setCards(moveCard(cards, activeCard, bottomCard))\n\n      setActiveCard(null)\n    } else if (!card.isActive && card.canMove) {\n      setActiveCard(card)\n    }\n    const mouseY = card.y\n    const mouseX = card.x\n    startRef.current = { x: clientX, y: clientY }\n    deltaRef.current = { x: clientX - card.x, y: clientY - card.y }\n    setPressed(true)\n\n    setCursorState({ mouseX, mouseY })\n  }\n\n  const onMouseMove = ({ clientY, clientX }) => {\n    const mouseY = clientY - deltaRef.current.y\n    const mouseX = clientX - deltaRef.current.x\n    setCursorState({ mouseY, mouseX })\n  }\n\n  const onMouseUp = ({ clientX, clientY }) => {\n    const diffX = Math.abs(startRef.current.x - clientX)\n    const diffY = Math.abs(startRef.current.y - clientY)\n    const passedThreshold = diffX > 15 || diffY > 15\n\n    deltaRef.current = { x: 0, y: 0 }\n    setPressed(false)\n\n    if (activeCard) {\n      let clickedCard = getCardFromPoint(clientX, clientY, cards)\n      clickedCard = getBottomCard(clickedCard, cards)\n      if (clickedCard) {\n        setCards(moveCard(cards, activeCard, clickedCard))\n      }\n      if (passedThreshold) {\n        setActiveCard(null)\n      }\n    }\n  }\n\n  useWindowEvent('resize', debounce(useForceUpdate(), 500))\n  useWindowEvent('pointerup', onMouseUp)\n  useWindowEvent('pointerdown', onMouseDown)\n  useWindowEvent('pointermove', onMouseMove)\n\n  return (\n    <div className=\"container\">\n      <Header\n        hasWon={hasWon}\n        onReset={() => {\n          setCards(shuffleDeck())\n          setHasWon(false)\n        }}\n      />\n\n      {[0, 1, 2, 3, 4, 5].map(n => (\n        <Card\n          key={`pile-${n}`}\n          card={{\n            cardPileIndex: -1,\n            pileIndex: n,\n            isEmpty: true,\n          }}\n        />\n      ))}\n\n      {cards.map((card, cardIndex) => (\n        <Card\n          key={`card-${cardIndex}`}\n          card={{\n            ...card,\n            isActive: getCardIsActive(activeCard, card),\n            canMove: getCanCardMove(card, cards),\n            isFinished: finishedPiles.includes(card.pileIndex),\n          }}\n          activeCard={activeCard}\n          isPressed={pressed}\n          mouseX={cursorState.mouseX}\n          mouseY={cursorState.mouseY}\n        />\n      ))}\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}