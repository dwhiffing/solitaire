{"version":3,"sources":["utils/index.js","components/Card.js","App.js","index.js"],"names":["CARDS","split","map","n","value","Number","suit","flat","shuffleDeck","concat","chunk","shuffle","pile","pileIndex","i","cardPileIndex","c","index","isDescending","numbers","filter","number","length","moveCard","cards","movedCard","destinationCard","sourcePile","getCardPile","isFinished","numToMove","allowCheat","isCheat","isEmpty","movingCards","slice","validOrder","m","newCards","card","includes","isNaN","findIndex","finishedPiles","Object","values","groupBy","sort","a","b","join","getCardIsActive","activeCard","isActive","getCanCardMove","bottom","useWindowEvent","event","callback","useEffect","window","addEventListener","removeEventListener","SUITS","Card","onMouseDown","onMouseUp","cursorState","shouldFollowCursor","isPressed","canMove","height","Math","min","max","innerHeight","yBuffer","innerWidth","width","yOffset","abs","r","spring","s","mouseX","mouseY","xPos","yPos","x","y","classes","style","onPointerDown","bind","onPointerUp","data-index","data-pileindex","className","transform","zIndex","initialState","startX","startY","App","useState","setActiveCard","setCursorState","setCards","winRef","useRef","debounce","setValue","useForceUpdate","timer","Date","now","startTime","setStartTime","seconds","minutes","hours","time","setTime","setTimeout","difference","floor","reset","useTimer","uniq","current","alert","e","pageX","pageY","topDeltaY","topDeltaX","pressedIndex","onCardRelease","clickedCard","diffX","diffY","elementUnder","document","elementFromPoint","parentElement","dataIndex","dataset","emptyCard","pileindex","getCardFromPoint","clientX","clientY","textAlign","toString","padStart","onClick","confirm","key","cardIndex","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.c3e37234.chunk.js","sourcesContent":["import shuffle from 'lodash/shuffle'\nimport chunk from 'lodash/chunk'\nimport { useEffect, useState } from 'react'\nimport groupBy from 'lodash/groupBy'\n\nconst VALUES = '987654321'\n\nconst CARDS = VALUES.split('')\n  .map(n => [\n    { value: Number(n), suit: 0 },\n    { value: Number(n), suit: 1 },\n    { value: Number(n), suit: 2 },\n    { value: Number(n), suit: 3 },\n  ])\n  .flat()\n\nexport const SORTED_CARDS = VALUES.split('')\n  .map(n => ({ value: Number(n), suit: 0 }))\n  .concat(VALUES.split('').map(n => ({ value: Number(n), suit: 1 })))\n\nexport const shuffleDeck = () =>\n  chunk(shuffle(CARDS), 6)\n    .map((pile, pileIndex) =>\n      pile.map((n, i) => ({\n        ...n,\n        cardPileIndex: i,\n        pileIndex,\n      })),\n    )\n    .flat()\n    .map((c, i) => ({ ...c, index: i }))\n\nexport const isDescending = numbers => {\n  return (\n    numbers.filter((number, index) => {\n      return numbers[index + 1] ? number === numbers[index + 1] + 1 : true\n    }).length === numbers.length\n  )\n}\n\nexport const moveCard = (cards, movedCard, destinationCard) => {\n  const sourcePile = getCardPile(movedCard, cards)\n  if (movedCard.isFinished || destinationCard.isFinished) {\n    return cards\n  }\n\n  const numToMove = sourcePile.length - movedCard.cardPileIndex\n  const allowCheat =\n    numToMove === 1 && !movedCard.isCheat && !destinationCard.isCheat\n  const isCheat =\n    movedCard.value !== destinationCard.value - 1 && !destinationCard.isEmpty\n\n  const movingCards = sourcePile.slice(\n    movedCard.cardPileIndex,\n    movedCard.cardPileIndex + numToMove,\n  )\n\n  const validOrder =\n    destinationCard.isEmpty ||\n    (!destinationCard.isCheat &&\n      isDescending([destinationCard.value, ...movingCards.map(m => m.value)]))\n\n  const newCards = cards.map(card => {\n    if (\n      card.pileIndex !== movedCard.pileIndex ||\n      movedCard.pileIndex === destinationCard.pileIndex\n    ) {\n      return card\n    }\n\n    if (!movingCards.map(c => c.index).includes(card.index)) {\n      return card\n    }\n\n    if (\n      (validOrder || allowCheat) &&\n      !Number.isNaN(destinationCard.pileIndex)\n    ) {\n      const cardPileIndex =\n        destinationCard.cardPileIndex +\n        movingCards.findIndex(c => c.index === card.index) +\n        1\n\n      return {\n        ...card,\n        pileIndex: destinationCard.pileIndex,\n        cardPileIndex,\n        isCheat,\n      }\n    }\n\n    return card\n  })\n\n  const piles = Object.values(\n    groupBy(newCards, card => card.pileIndex),\n  ).map(pile => pile.sort((a, b) => a.cardPileIndex - b.cardPileIndex))\n\n  const finishedPiles = piles\n    .map(pile => ({\n      pile: pile.map(card => card.value).join(''),\n      index: pile[0].pileIndex,\n    }))\n    .filter(({ pile }) => pile === '987654321')\n    .map(pile => pile.index)\n\n  return newCards.map(c => ({\n    ...c,\n    isFinished: finishedPiles.includes(c.pileIndex),\n  }))\n}\n\nexport function getCardIsActive(activeCard, card) {\n  let isActive = false\n\n  if (activeCard) {\n    isActive =\n      activeCard.pileIndex === card.pileIndex &&\n      activeCard.cardPileIndex <= card.cardPileIndex\n  }\n\n  return isActive\n}\n\nexport const getCardPile = (card, cards) => {\n  const pile = cards.filter(c => c.pileIndex === card.pileIndex)\n  return pile.sort((a, b) => a.cardPileIndex - b.cardPileIndex)\n}\n\nexport const getCanCardMove = (card, cards) => {\n  const pile = getCardPile(card, cards)\n  const bottom = pile.map(c => c.value).slice(card.cardPileIndex, pile.length)\n  return isDescending(bottom)\n}\n\nexport const useWindowEvent = (event, callback) => {\n  useEffect(() => {\n    window.addEventListener(event, callback)\n    return () => window.removeEventListener(event, callback)\n  }, [event, callback])\n}\n\nexport const getCardFromPoint = (x, y, cards) => {\n  let card\n  const elementUnder = document.elementFromPoint(x, y)\n\n  if (elementUnder && elementUnder.parentElement) {\n    const dataIndex = elementUnder.parentElement.dataset.index\n\n    if (dataIndex) {\n      card = cards[+dataIndex]\n    } else {\n      let emptyCard = {\n        cardPileIndex: -1,\n        pileIndex: +elementUnder.parentElement.dataset.pileindex,\n        isEmpty: true,\n        canMove: true,\n      }\n      const pile = getCardPile(emptyCard, cards)\n\n      if (pile.length === 0) {\n        card = { ...emptyCard }\n      }\n    }\n  }\n\n  if (card && !card.isEmpty) {\n    const pile = getCardPile(card, cards)\n    card = pile[pile.length - 1]\n  }\n\n  return card\n}\n\nexport const useForceUpdate = () => {\n  const [, setValue] = useState(0)\n  return () => setValue(value => ++value)\n}\n\nexport const useTimer = () => {\n  const [startTime, setStartTime] = useState(Date.now())\n  const [time, setTime] = useState({ seconds: 0, minutes: 0, hours: 0 })\n\n  useEffect(() => {\n    setTimeout(() => {\n      const difference = Date.now() - startTime\n      setTime({\n        hours: Math.floor((difference / (1000 * 60 * 60)) % 24),\n        minutes: Math.floor((difference / 1000 / 60) % 60),\n        seconds: Math.floor((difference / 1000) % 60),\n        reset: () => setStartTime(Date.now()),\n      })\n    }, 1000)\n  })\n\n  return time\n}\n","import React from 'react'\nimport { Motion, spring } from 'react-motion'\n\nconst SUITS = ['spades', 'clubs', 'hearts', 'diamonds']\n\nexport const Card = ({\n  card,\n  activeCard,\n  onMouseDown,\n  onMouseUp,\n  cursorState,\n}) => {\n  const shouldFollowCursor =\n    cursorState.isPressed && card.isActive && card.canMove\n\n  let height = Math.min(38, Math.max(window.innerHeight / 16, 25))\n  let yBuffer = height * 2\n  if (window.innerWidth > 1000) {\n    height = Math.min(50, Math.max(window.innerHeight / 16, 25))\n    yBuffer = height * 3\n  }\n\n  const width = window.innerWidth / 6.2\n  const yOffset = shouldFollowCursor\n    ? height * Math.abs(activeCard.cardPileIndex - card.cardPileIndex)\n    : 0\n  const r = spring(card.isCheat ? 22 : 0)\n  const s = spring(card.isActive ? 1.185 : 1)\n  const { mouseX, mouseY } = cursorState\n  const xPos = width / 4 + card.pileIndex * width\n  const yPos = card.isEmpty\n    ? yBuffer\n    : yBuffer + (card.isFinished ? 0 : card.cardPileIndex * height)\n\n  const x = shouldFollowCursor ? mouseX : spring(xPos)\n  const y = shouldFollowCursor ? mouseY + yOffset : spring(yPos)\n  const classes = [\n    'card',\n    card.isFinished ? 'is-finished' : `rank${card.value}`,\n    SUITS[card.suit],\n    shouldFollowCursor && 'disable-touch',\n    card.isEmpty && 'empty',\n  ]\n\n  return (\n    <Motion style={{ x, y, r, s }}>\n      {({ x, y, r, s }) => (\n        <div\n          onPointerDown={\n            card.isFinished ? null : onMouseDown.bind(null, card, x, y)\n          }\n          onPointerUp={\n            card.isFinished ? null : onMouseUp.bind(null, card, x, y)\n          }\n          data-index={card.index}\n          data-pileindex={card.pileIndex || 0}\n          className={classes.join(' ')}\n          style={{\n            transform: `translate3d(${x}px, ${y}px, 0) rotate(${r}deg) scale(${s})`,\n            zIndex: shouldFollowCursor\n              ? 35 + card.cardPileIndex\n              : card.cardPileIndex,\n          }}\n        >\n          <div className=\"face\" />\n          {card.isFinished && <div className=\"back\" />}\n        </div>\n      )}\n    </Motion>\n  )\n}\n","import React, { useState, useEffect, useRef } from 'react'\nimport {\n  shuffleDeck,\n  useWindowEvent,\n  moveCard,\n  getCanCardMove,\n  getCardIsActive,\n  getCardFromPoint,\n  useForceUpdate,\n  useTimer,\n} from './utils'\nimport { Card } from './components/Card'\nimport './index.css'\nimport debounce from 'lodash/debounce'\nimport uniq from 'lodash/uniq'\n\nconst initialState = { startX: 0, startY: 0, mouseY: 0, mouseX: 0 }\n\nfunction App() {\n  const [activeCard, setActiveCard] = useState(null)\n  const [cursorState, setCursorState] = useState(initialState)\n  const [cards, setCards] = useState(shuffleDeck())\n  const winRef = useRef(false)\n  useWindowEvent('resize', debounce(useForceUpdate(), 500))\n  const timer = useTimer()\n\n  useEffect(() => {\n    const finished = uniq(cards.filter(c => c.isFinished).map(c => c.pileIndex))\n    if (finished.length >= 2 && !winRef.current) {\n      winRef.current = true\n      const time = timer.seconds + timer.minutes * 60\n      setTimeout(() => {\n        alert(`You win! Your final time was ${time} seconds`)\n        setCards(shuffleDeck())\n        timer.reset()\n        winRef.current = false\n      }, 1000)\n    }\n  }, [cards, timer])\n\n  const onMouseDown = (card, mouseX, mouseY, e) => {\n    const { pageX: startX, pageY: startY } = e\n    if (activeCard) {\n      setCards(moveCard(cards, activeCard, card))\n      setActiveCard(null)\n    } else if (\n      card.isActive ||\n      !card.canMove ||\n      (!activeCard && card.isEmpty)\n    ) {\n      setActiveCard(null)\n    } else {\n      setActiveCard(card)\n    }\n\n    setCursorState({\n      topDeltaY: startY - mouseY,\n      topDeltaX: startX - mouseX,\n      mouseY,\n      mouseX,\n      startX,\n      startY,\n      isPressed: true,\n      pressedIndex: card.index,\n    })\n  }\n\n  const onMouseMove = ({ pageY, pageX }) => {\n    const { isPressed, topDeltaY, topDeltaX } = cursorState\n\n    if (isPressed) {\n      const mouseY = pageY - topDeltaY\n      const mouseX = pageX - topDeltaX\n\n      // TODO show preview of cheat rotation when hovering\n      // const card = getCardFromPoint(mouseX, mouseY, cards)\n      // if (card) {\n      //   console.log(card.value)\n      // }\n\n      setCursorState({ ...cursorState, mouseY, mouseX })\n    }\n  }\n\n  const onMouseUp = e => {\n    const diffX = Math.abs(cursorState.startX - e.pageX)\n    const diffY = Math.abs(cursorState.startY - e.pageY)\n    if (\n      activeCard &&\n      typeof cursorState.pressedIndex === 'number' &&\n      diffX < 10 &&\n      diffY < 10\n    ) {\n    } else {\n      setActiveCard(null)\n    }\n\n    setCursorState({\n      ...cursorState,\n      isPressed: false,\n      pressedIndex: null,\n      topDeltaY: 0,\n    })\n  }\n\n  const onCardRelease = (clickedCard, x, y, e) => {\n    const diffX = Math.abs(cursorState.startX - e.pageX)\n    const diffY = Math.abs(cursorState.startY - e.pageY)\n\n    if (\n      activeCard &&\n      typeof cursorState.pressedIndex === 'number' &&\n      (diffX > 10 || diffY > 10)\n    ) {\n      const clickedCard = getCardFromPoint(e.clientX, e.clientY, cards)\n\n      if (activeCard && clickedCard) {\n        setCards(moveCard(cards, activeCard, clickedCard))\n      }\n    }\n  }\n\n  useWindowEvent('pointerup', onMouseUp)\n  useWindowEvent('pointermove', onMouseMove)\n\n  return (\n    <div className=\"container\">\n      <div style={{ width: 80 }}>\n        <span>Solitaire</span>\n      </div>\n\n      <div style={{ width: 80, textAlign: 'center' }}>\n        <span>\n          {`${timer.minutes.toString().padStart(2, '0') +\n            ':'}${timer.seconds.toString().padStart(2, '0')}`}\n        </span>\n      </div>\n\n      <div style={{ width: 80, textAlign: 'center' }}>\n        <span\n          onClick={() => {\n            const yes = window.confirm('Start a new game?')\n            if (yes) {\n              timer.reset()\n              setCards(shuffleDeck())\n            }\n          }}\n        >\n          +\n        </span>\n      </div>\n\n      {[0, 1, 2, 3, 4, 5].map(n => (\n        <Card\n          key={`pile-${n}`}\n          card={{\n            cardPileIndex: -1,\n            pileIndex: n,\n            isEmpty: true,\n            canMove: true,\n          }}\n          onMouseUp={onCardRelease}\n          cursorState={cursorState}\n          onMouseDown={onMouseDown}\n        />\n      ))}\n\n      {cards.map((card, cardIndex) => (\n        <Card\n          key={`card-${cardIndex}`}\n          card={{\n            ...card,\n            isCheat: !!card.isCheat,\n            isActive: getCardIsActive(activeCard, card),\n            canMove: getCanCardMove(card, cards),\n            pileIndex: card.pileIndex,\n            cardPileIndex: card.cardPileIndex,\n          }}\n          activeCard={activeCard}\n          cursorState={cursorState}\n          onMouseUp={onCardRelease}\n          onMouseDown={onMouseDown}\n        />\n      ))}\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}